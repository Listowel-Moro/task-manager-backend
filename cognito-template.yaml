AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Task Management System Backend

Parameters:
  TeamMemberSubscriptionStepFunctionArn:
    Type: String
    Description: ARN of the Step Function for team member
  TaskAssignmentNotificationTopicArn:
    Type: String
    Description: ARN of the SNS Topic for task assignment notifications


Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyAppUserPool
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Verify your email for our application"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false  # Allow users to sign up themselves
        InviteMessageTemplate:
          EmailSubject: Welcome to Our Application
          EmailMessage: Your username is {username} and temporary password is {####}. Please login to reset your password.
          SMSMessage: Your username is {username} and temporary password is {####}
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: name
          AttributeDataType: String
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyAppClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref UserPool
      Description: Group for admin users who can create other users

  MembersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: member
      UserPoolId: !Ref UserPool
      Description: Group for admin users who can create other users

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization


  # Lambda Functions
  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignUpFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.SignUpHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:AdminConfirmSignUp
                - cognito-idp:AdminAddUserToGroup  # Added this permission
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
      Events:
        SignUpApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /signup
            Method: POST
            Auth:
              Authorizer: NONE


  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignInFunction
      CodeUri: TaskManager
      Handler: com.amalitechtaskmanager.handlers.auth.SignInHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        SignInApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /signin
            Method: POST
            Auth:
              Authorizer: NONE

  AdminCreateMemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminCreateMemberFunction
      CodeUri: TaskManager
      Handler: com.amalitechtaskmanager.handlers.auth.AdminCreateMemberHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref TaskAssignmentNotificationTopicArn
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref TeamMemberSubscriptionStepFunctionArn
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          TASK_ASSIGNMENT_TOPIC_ARN: !Ref TaskAssignmentNotificationTopicArn
          TEAM_MEMBER_SUBSCRIPTION_STEP_FUNCTION_ARN: !Ref TeamMemberSubscriptionStepFunctionArn
      Events:
        AdminCreateMemberApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/create-member
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  UserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt UserPool.Arn
#  TaskAssignmentNotificationTopicArn:
#    Description: SNS Task Assignment Notification Topic ARN
#    Value: !Ref TaskAssignmentNotificationTopic
#  TaskDeadlineNotificationTopicArn:
#    Description: SNS Task Deadline Notification Topic ARN
#    Value: !Ref TaskDeadlineNotificationTopic
#  ClosedTasksNotificationTopicArn:
#    Description: SNS Closed Tasks Notification Topic ARN
#    Value: !Ref ClosedTasksNotificationTopic