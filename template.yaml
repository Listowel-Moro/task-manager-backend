AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Task Management System Backend - Complete Template

Parameters:
  Environment:
    Type: String
    Default: Production
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: Environment for the deployment

Resources:
  #============================================================================
  # Cognito Resources
  #============================================================================
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MyAppUserPool
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Verify your email for our application"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false  # Changed to true for admin-only creation
        InviteMessageTemplate:
          EmailSubject: Welcome to Our Application
          EmailMessage: Your username is {username} and temporary password is {####}. Please login to reset your password.
          SMSMessage: Your username is {username} and temporary password is {####}
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: name
          AttributeDataType: String
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MyAppClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AccessTokenValidity: 5
      IdTokenValidity: 5

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      UserPoolId: !Ref UserPool
      Description: Group for admin users who can create other users

  MembersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: member
      UserPoolId: !Ref UserPool
      Description: Group for regular member users

  #============================================================================
  # API Gateway Resources
  #============================================================================
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            Identity:
              Header: Authorization

  #============================================================================
  # DynamoDB Resources
  #============================================================================
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tasks
      AttributeDefinitions:
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: taskId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Component
          Value: DynamoDB

  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Comments
      AttributeDefinitions:
        - AttributeName: commentId
          AttributeType: S
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: commentId
          KeyType: HASH
        - AttributeName: taskId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Component
          Value: DynamoDB

  #============================================================================
  # SNS and SQS Resources
  #============================================================================
  TaskAssignmentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TaskAssignmentNotificationTopic
      Tags:
        - Key: Component
          Value: SNS-SQS

  TaskDeadlineNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TaskDeadlineNotification
      Tags:
        - Key: Component
          Value: SNS-SQS

  ClosedTasksNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ClosedTasksNotification
      Tags:
        - Key: Component
          Value: SNS-SQS

  TaskCompleteNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TaskCompleteNotification
      Tags:
        - Key: Component
          Value: SNS-SQS

  EmailNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EmailNotificationTopic
      DisplayName: "Task Notifications"
      Tags:
        - Key: Component
          Value: SNS-SQS

  TaskExpirationNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: task-expiration-notifications
      Tags:
        - Key: Component
          Value: SNS-SQS

  TaskCreationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TaskCreationDLQ.fifo
      FifoQueue: true
      Tags:
        - Key: Component
          Value: SNS-SQS

  TaskAssignmentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TaskAssignmentQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TaskCreationDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Component
          Value: SNS-SQS

  TaskDeadlineQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TaskDeadlineQueue
      Tags:
        - Key: Component
          Value: SNS-SQS

  #============================================================================
  # IAM Roles
  #============================================================================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !GetAtt UserPool.Arn
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt TasksTable.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt TaskAssignmentQueue.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref TaskAssignmentNotificationTopic
                  - !Ref TaskExpirationNotificationTopic
                  - !Ref TaskDeadlineNotificationTopic
                  - !Ref EmailNotificationTopic
                  - !Ref ClosedTasksNotificationTopic
                  - !Ref TaskCompleteNotificationTopic
      Tags:
        - Key: Component
          Value: Lambda

  EventBridgeSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub EventBridgeSchedulerRole-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub EventBridgeSchedulerPolicy-${Environment}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub
                  - arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}
                  - Environment: !Ref Environment


  EventBridgeSchedulerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub EventBridgeSchedulerPolicy-${Environment}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}"

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:Publish
                  - dynamodb:UpdateItem
                Resource: '*'
      Tags:
        - Key: Component
          Value: StepFunctions

  #============================================================================
  # Step Functions
  #============================================================================
  TeamMemberSubscriptionStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "StartAt": "ParallelSubscribe",
          "States": {
            "ParallelSubscribe": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "SubscribeAssignment",
                  "States": {
                    "SubscribeAssignment": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:sns:subscribe",
                      "Parameters": {
                        "TopicArn": "${TaskAssignmentNotificationTopic}",
                        "Protocol": "email",
                        "Endpoint.$": "$.email",
                        "Attributes": {
                          "FilterPolicy": {"recipient_email.$": "States.Array($.email)" }
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeDeadline",
                  "States": {
                    "SubscribeDeadline": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:sns:subscribe",
                      "Parameters": {
                        "TopicArn": "${TaskDeadlineNotificationTopic}",
                        "Protocol": "email",
                        "Endpoint.$": "$.email",
                        "Attributes": {
                         "FilterPolicy": {"recipient_email.$": "States.Array($.email)" }
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "SubscribeClosed",
                  "States": {
                    "SubscribeClosed": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::aws-sdk:sns:subscribe",
                      "Parameters": {
                        "TopicArn": "${ClosedTasksNotificationTopic}",
                        "Protocol": "email",
                        "Endpoint.$": "$.email",
                        "Attributes": {
                          "FilterPolicy": {"recipient_email.$": "States.Array($.email)" }
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StepFunctionRole.Arn
      Tags:
        - Key: Component
          Value: StepFunctions
  #============================================================================
  # Lambda Functions - Auth
  #============================================================================
  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignUpFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.SignUpHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:AdminConfirmSignUp
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminUpdateUserAttributes
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
      Events:
        SignUpApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /signup
            Method: POST
            Auth:
              Authorizer: NONE

  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignInFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.SignInHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminListGroupsForUser
                - cognito-idp:RespondToAuthChallenge
                - cognito-idp:AdminUpdateUserAttributes
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref TeamMemberSubscriptionStepFunction
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
          TEAM_MEMBER_SUBSCRIPTION_STEP_FUNCTION_ARN: !Ref TeamMemberSubscriptionStepFunction
      Events:
        SignInApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /signin
            Method: POST
            Auth:
              Authorizer: NONE

  AdminCreateMemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminCreateMemberFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.AdminCreateMemberHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:ResendConfirmationCode
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref TaskAssignmentNotificationTopic
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref TeamMemberSubscriptionStepFunction
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          TASK_ASSIGNMENT_TOPIC_ARN: !Ref TaskAssignmentNotificationTopic
          TEAM_MEMBER_SUBSCRIPTION_STEP_FUNCTION_ARN: !Ref TeamMemberSubscriptionStepFunction
      Events:
        AdminCreateMemberApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/create-member
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  ForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ForgotPasswordFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.ForgotPasswordHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ForgotPassword
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        ForgotPasswordApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /forgot-password
            Method: POST
            Auth:
              Authorizer: NONE

  ConfirmForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ConfirmForgotPasswordFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.ConfirmForgotPasswordHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmForgotPassword
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        ConfirmForgotPasswordApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /confirm-forgot-password
            Method: POST
            Auth:
              Authorizer: NONE

  SignOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignOutFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.SignOutHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GlobalSignOut
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        SignOutApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /signout
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  RefreshTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: RefreshTokenFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.TokenRefreshHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        RefreshTokenApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /refresh-token
            Method: POST
            Auth:
              Authorizer: NONE

  ChangePasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ChangePasswordFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.ChangePasswordHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ChangePassword
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        ChangePasswordApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /change-password
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  VerifyEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VerifyEmailFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.VerifyEmailHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmSignUp
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref TeamMemberSubscriptionStepFunction
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          TEAM_MEMBER_SUBSCRIPTION_STEP_FUNCTION_ARN: !Ref TeamMemberSubscriptionStepFunction
      Events:
        VerifyEmailApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /verify-email
            Method: POST
            Auth:
              Authorizer: NONE

  ResendTempPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ResendTempPasswordFunction
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.auth.ResendTempPasswordHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:GetUser
                - cognito-idp:AdminListGroupsForUser
              Resource: !GetAtt UserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        ResendTempPasswordApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /admin/resend-temp-password
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  #============================================================================
  # Lambda Functions - Task Management
  #============================================================================
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.CreateTaskHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          TASK_ASSIGNMENT_QUEUE: !GetAtt TaskAssignmentQueue.QueueUrl
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks
            Method: POST
      Tags:
        Component: Lambda

  ProcessTaskAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.ProcessTaskAssignmentHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref TaskAssignmentNotificationTopic
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TaskAssignmentQueue.Arn
            BatchSize: 10
      Tags:
        Component: Lambda

  GetAdminTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.GetAdminTasksHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
      Events:
        GetAdminTasksApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks
            Method: GET
      Tags:
        Component: Lambda

  GetAdminTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.GetAdminTaskHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
      Events:
        GetAdminTask:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks/{taskId}
            Method: GET
      Tags:
        Component: Lambda

  GetAdminAnalyticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.GetAdminAnalyticsHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
      Events:
        GetAdminAnalyticsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks/analytics
            Method: GET
      Tags:
        Component: Lambda

  CompleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.CompleteTaskHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
      Events:
        CompleteTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks/{taskId}/complete
            Method: PUT
      Tags:
        Component: Lambda

  CloseTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.CloseTaskHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          TASK_CLOSED_TOPIC_ARN: !Ref ClosedTasksNotificationTopic
      Events:
        CloseTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks/{taskId}/close
            Method: PUT
      Tags:
        Component: Lambda

  ReAssignTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.task.ReAssignTaskHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          TASK_ASSIGNMENT_TOPIC_ARN: !Ref TaskAssignmentNotificationTopic
      Events:
        ReAssignTaskApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tasks/{taskId}
            Method: PUT
      Tags:
        Component: Lambda

  TaskExpirationHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      FunctionName: !Sub TaskExpirationHandler-${Environment}
      Handler: com.amalitechtaskmanager.handlers.task.TaskExpirationHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTable
          TASK_EXPIRATION_NOTIFICATION_TOPIC_ARN: !Ref TaskExpirationNotificationTopic
          TASK_DEADLINE_NOTIFICATION_TOPIC_ARN: !Ref TaskDeadlineNotificationTopic
      Events:
        TaskExpirationSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
            Enabled: true

  #============================================================================
  # Lambda Functions - Comments
  #============================================================================
  CreateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.comment.CreateCommentHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: Comments
      Policies:
        - DynamoDBWritePolicy:
            TableName: Comments
      Events:
        CreateCommentApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /comments
            Method: POST

  DeleteCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.comment.DeleteCommentHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: Comments
      Policies:
        - DynamoDBWritePolicy:
            TableName: Comments
      Events:
        DeleteCommentApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /comments
            Method: DELETE

  #============================================================================
  # Lambda Functions - Notifications
  #============================================================================
  CreateDeadlineEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CreateDeadlineEventLambda-${Environment}
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.notification.CreateDeadlineEvent::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Description: Lambda function to create deadline events from DynamoDB Streams
      Environment:
        Variables:
          SCHEDULER_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
          TARGET_LAMBDA_ARN: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}"
          ACCOUNT_ID: !Ref AWS::AccountId
          REGION: !Ref AWS::Region
          TABLE_NAME: !Ref TasksTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !GetAtt TasksTable.StreamArn
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
              Resource: !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*"
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt EventBridgeSchedulerRole.Arn
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TasksTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true
            FilterCriteria:
              Filters:
                - Pattern: '{"dynamodb": {"NewImage": {"status": {"S": ["CREATED", "MODIFIED"]}}}}'

  ReminderProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ReminderProcessorLambda-${Environment}
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.notification.ReminderProcessorLambda::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          SNS_TOPIC_ARN: !Ref EmailNotificationTopic
          ACCOUNT_ID: !Ref AWS::AccountId
          REGION: !Ref AWS::Region
          TABLE_NAME: !Ref TasksTable
          TASK_DEADLINE_TOPIC_ARN: !Ref TaskDeadlineNotificationTopic
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref EmailNotificationTopic

  UpdateTaskScheduleLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub UpdateTaskScheduleLambda-${Environment}
      CodeUri: TaskManager/
      Handler: com.amalitechtaskmanager.handlers.notification.UpdateTaskScheduleLambda::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          TARGET_LAMBDA_ARN: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}"
          SCHEDULER_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
          ACCOUNT_ID: !Ref AWS::AccountId
          REGION: !Ref AWS::Region
          TABLE_NAME: !Ref TasksTable
          TASK_DEADLINE_TOPIC_ARN: !Ref TaskDeadlineNotificationTopic
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !GetAtt TasksTable.StreamArn
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:DeleteSchedule
                - scheduler:GetSchedule
                - iam:PassRole
              Resource: "*"
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TasksTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  UserPoolArn:
    Description: Cognito User Pool ARN
    Value: !GetAtt UserPool.Arn

  TasksTableName:
    Description: DynamoDB Tasks Table Name
    Value: !Ref TasksTable

  TasksTableArn:
    Description: DynamoDB Tasks Table ARN
    Value: !GetAtt TasksTable.Arn

  TasksTableStreamArn:
    Description: DynamoDB Tasks Table Stream ARN
    Value: !GetAtt TasksTable.StreamArn

  TaskAssignmentNotificationTopicArn:
    Description: SNS Task Assignment Notification Topic ARN
    Value: !Ref TaskAssignmentNotificationTopic

  TaskDeadlineNotificationTopicArn:
    Description: SNS Task Deadline Notification Topic ARN
    Value: !Ref TaskDeadlineNotificationTopic

  ClosedTasksNotificationTopicArn:
    Description: SNS Closed Tasks Notification Topic ARN
    Value: !Ref ClosedTasksNotificationTopic

  EmailNotificationTopicArn:
    Description: SNS Email Notification Topic ARN
    Value: !Ref EmailNotificationTopic

  TaskAssignmentQueueArn:
    Description: SQS Task Assignment Queue ARN
    Value: !GetAtt TaskAssignmentQueue.Arn

  TaskExpirationNotificationTopicArn:
    Description: SNS Task Expiration Notification Topic ARN
    Value: !Ref TaskExpirationNotificationTopic

  TeamMemberSubscriptionStepFunctionArn:
    Description: ARN of the Team Member Subscription Step Function
    Value: !Ref TeamMemberSubscriptionStepFunction

  EventBridgeSchedulerRoleArn:
    Description: EventBridge Scheduler Role ARN
    Value: !GetAtt EventBridgeSchedulerRole.Arn

  CreateDeadlineEventLambdaArn:
    Description: ARN of the Create Deadline Event Lambda
    Value: !GetAtt CreateDeadlineEventLambda.Arn

  ReminderProcessorLambdaArn:
    Description: ARN of the Reminder Processor Lambda
    Value: !GetAtt ReminderProcessorLambda.Arn

  UpdateTaskScheduleLambdaArn:
    Description: ARN of the Update Task Schedule Lambda
    Value: !GetAtt UpdateTaskScheduleLambda.Arn