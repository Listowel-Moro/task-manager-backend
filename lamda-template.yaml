AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda Functions for Task Management System Backend

Parameters:
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  UserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID
  TasksTableName:
    Type: String
    Description: DynamoDB Tasks Table Name
  TaskAssignmentQueueArn:
    Type: String
    Description: SQS Task Assignment Queue ARN
  TaskAssignmentNotificationTopicArn:
    Type: String
    Description: SNS Task Assignment Notification Topic ARN

Globals:
  Function:
    Runtime: java21
    MemorySize: 512
    Timeout: 30
    CodeUri: TaskManager/
  Api:
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - cognito-idp:*
                Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TasksTableName}"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Ref TaskAssignmentQueueArn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref TaskAssignmentNotificationTopicArn
      Tags:
        - Key: Component
          Value: Lambda

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.amalitechtaskmanager.handlers.task.CreateTaskHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASKS_TABLE: !Ref TasksTableName
          TASK_ASSIGNMENT_QUEUE: !Ref TaskAssignmentQueueArn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /tasks
            Method: POST
      Tags:
        Component: Lambda

  ProcessTaskAssignmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.amalitechtaskmanager.handlers.task.ProcessTaskAssignmentHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref TaskAssignmentNotificationTopicArn
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !Ref TaskAssignmentQueueArn
            BatchSize: 10
      Tags:
        Component: Lambda

  GetTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.amalitechtaskmanager.handlers.task.MemberGetTaskHandler::handleRequest
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TASK_TABLE_NAME: !Ref TasksTableName
      Events:
        GetTask:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: GET
      Tags:
        Component: Lambda

# Notification Lambda's
  CreateDeadlineEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CreateDeadlineEventLambda-${Environment}
      Handler: com.amalitechtaskmanager.handlers.notification.CreateDeadlineEvent::handleRequest
      CodeUri: TaskManager/
      Description: Lambda function to create deadline events from DynamoDB Streams
      Environment:
        Variables:
          SCHEDULER_ROLE_ARN: !GetAtt EventBridgeSchedulerRole.Arn
          TARGET_LAMBDA_ARN: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ReminderProcessorLambda-${Environment}
          TABLE_NAME: !Ref TasksTable
          ACCOUNT_ID: !Ref AccountId
          REGION: !Ref Region

      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !GetAtt TasksTable.StreamArn
        - Statement:
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
              Resource: !Sub arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt EventBridgeSchedulerRole.Arn
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TasksTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true
            # Filter events to only those with status "CREATED"
            FilterCriteria:
              Filters:
                - Pattern: '{"dynamodb": {NewImage: {"status": {"S": ["CREATED", "MODIFIED"]}}}}'


Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
