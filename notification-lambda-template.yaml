
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Notification Lambda Functions for Task Management System

Parameters:
  Environment:
    Type: String
    Description: Environment name (e.g., dev, prod)
  TasksTableArn:
    Type: String
    Description: ARN of the Tasks DynamoDB table
  TasksTableName:
    Type: String
    Description: Name of the Tasks DynamoDB table
  TasksTableStreamArn:
    Type: String
    Description: ARN of the Tasks DynamoDB table stream
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID
  NotificationTopicArn:
    Type: String
    Description: SNS Notification Topic ARN
  EventBridgeSchedulerRoleArn:
    Type: String
    Description: EventBridge Scheduler Role ARN
  AccountId:
    Type: String
    Description: AWS Account ID
  Region:
    Type: String
    Description: AWS Region
  TaskDeadlineNotificationTopicArn:
    Type: String
    Description: ARN of the SNS Topic for task deadline notifications

Globals:
  Function:
    Runtime: java21
    MemorySize: 512
    Timeout: 30
    CodeUri: TaskManager/
    Environment:
      Variables:
        ACCOUNT_ID: !Ref AccountId
        REGION: !Ref Region
        TABLE_NAME: !Ref TasksTableName
        TASK_DEADLINE_TOPIC_ARN: !Ref TaskDeadlineNotificationTopicArn

Resources:
  CreateDeadlineEventLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub CreateDeadlineEventLambda-${Environment}
      Handler: com.amalitechtaskmanager.handlers.notification.CreateDeadlineEvent::handleRequest
      Description: Lambda function to create deadline events from DynamoDB Streams
      Environment:
        Variables:
          SCHEDULER_ROLE_ARN: !Ref EventBridgeSchedulerRoleArn
          TARGET_LAMBDA_ARN: !Sub arn:aws:lambda:${Region}:${AccountId}:function:ReminderProcessorLambda-${Environment}
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTableName
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !Ref TasksTableStreamArn
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
              Resource: !Sub arn:aws:scheduler:${Region}:${AccountId}:schedule/*
            - Effect: Allow
              Action: iam:PassRole
              Resource: !Ref EventBridgeSchedulerRoleArn
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !Ref TasksTableStreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true
            FilterCriteria:
              Filters:
                - Pattern: '{"dynamodb": {NewImage: {"status": {"S": ["CREATED", "MODIFIED"]}}}}'

  ReminderProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ReminderProcessorLambda-${Environment}
      Handler: com.amalitechtaskmanager.handlers.notification.ReminderProcessorLambda::handleRequest
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPoolId
          SNS_TOPIC_ARN: !Ref NotificationTopicArn
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTableName
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: !Sub arn:aws:cognito-idp:${Region}:${AccountId}:userpool/${UserPoolId}
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref NotificationTopicArn

  UpdateTaskScheduleLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub UpdateTaskScheduleLambda-${Environment}
      Handler: com.amalitechtaskmanager.handlers.notification.UpdateTaskScheduleLambda::handleRequest
      Environment:
        Variables:
          TARGET_LAMBDA_ARN: !Sub arn:aws:lambda:${Region}:${AccountId}:function:ReminderProcessorLambda-${Environment}
          SCHEDULER_ROLE_ARN: !Ref EventBridgeSchedulerRoleArn
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TasksTableName
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !Ref TasksTableStreamArn
            - Effect: Allow
              Action:
                - scheduler:CreateSchedule
                - scheduler:DeleteSchedule
                - scheduler:GetSchedule
                - iam:PassRole
              Resource: "*"
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            Stream: !Ref TasksTableStreamArn
            StartingPosition: LATEST
            BatchSize: 10
            Enabled: true

Outputs:
  CreateDeadlineEventLambdaArn:
    Description: ARN of the Create Deadline Event Lambda
    Value: !GetAtt CreateDeadlineEventLambda.Arn
  ReminderProcessorLambdaArn:
    Description: ARN of the Reminder Processor Lambda
    Value: !GetAtt ReminderProcessorLambda.Arn
  UpdateTaskScheduleLambdaArn:
    Description: ARN of the Update Task Schedule Lambda
    Value: !GetAtt UpdateTaskScheduleLambda.Arn
